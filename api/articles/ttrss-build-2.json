{"title":"Tiny Tiny RSS再次搭建","uid":"ddd8f8b95edef17d3014e115ee93b047","slug":"ttrss-build-2","date":"2021-07-22T13:00:27.000Z","updated":"2022-08-18T03:13:04.135Z","comments":true,"path":"api/articles/ttrss-build-2.json","keywords":null,"cover":[],"content":"<p>贫穷的Leon的腾讯云服务器快要到期了(发文章的时候已经到期了)，自用的TTRSS服务岌岌可危，这可咋整啊！！！所幸几周前已经把阿里云上的博客全部迁移到Github\nPages上了，阿里云的服务器就空出来了。</p>\n<p>但是，不幸再次降临，TTRSS官方把原来的安装方式取消了，推荐使用docker安装。经过一番摸索，终于完成了docker安装TTRSS，并搞定fever。</p>\n<p>环境说明：所使用的是Aliyun服务器（1C2G），系统为CentOS 7.9。</p>\n<span id=\"more\"></span>\n<h2 id=\"安装docker\">1 安装Docker</h2>\n<p>Docker是...啥？我也不是特别清楚，我把它看作是独立的运行环境，和虚拟机类似。详细的请找Docker官方文档和百度。</p>\n<p>首先确保系统内没有预安装旧版本的docker，使用命令卸载旧版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo yum remove docker docker-common docker-selinux docker-engine</code></pre>\n<p>配置yum源，参考了<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/centos/\">TUNA\nCentOS镜像使用帮助</a>。使用云服务器一般不需要配置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo sed -e &#39;s|^mirrorlist&#x3D;|#mirrorlist&#x3D;|g&#39; \\\n         -e &#39;s|^#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org|baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn|g&#39; \\\n         -i.bak \\\n         &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-*.repo\n\nsudo yum makecache</code></pre>\n<p>配置docker的yum源。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</code></pre>\n<p>安装docker相关依赖包。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre>\n<p>安装docker</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo yum install docker-ce</code></pre>\n<p>启动docker，并设置开机自启。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo systemctl start docker\nsudo systemctl enable docker</code></pre>\n<p>验证docker安装。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker version</code></pre>\n<h2 id=\"安装docker-compose\">2 安装Docker Compose</h2>\n<p>Docker Compose是基于Docker的多容器运行管理工具。</p>\n<p>下载Docker\nCompose的Release包。下面的命令使用的是1.29.2版本的Release，可前往<a href=\"https://github.com/docker/compose/releases\">软件发布页</a>查看最新的版本号，然后修改下面命令的版本号即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.29.2&#x2F;docker-compose-Linux-x86_64&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</code></pre>\n<p>为文件夹添加可执行权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</code></pre>\n<p>为Docker Compose在<code>/usr/bin/</code>创建链接。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将文件copy到&#x2F;usr&#x2F;bin&#x2F;目录下\nsudo ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose</code></pre>\n<p>验证Docker Compose安装。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker-compose --version</code></pre>\n<h2 id=\"安装ttrss\">3 安装TTRSS</h2>\n<p>TTRSS是啥就不再次介绍了，需要了解的可以看看之前写的<a href=\"/2020/04/23/ttrss-build/\">那篇文章</a>，或者直接访问<a href=\"https://tt-rss.org/\">TTRSS官网</a>。</p>\n<h3 id=\"获取docker安装所需文件\">3.1 获取docker安装所需文件</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git clone https:&#x2F;&#x2F;git.tt-rss.org&#x2F;fox&#x2F;ttrss-docker-compose.git ttrss-docker\ncd ttrss-docker\n# git checkout命令为切换static-dockerhub分支，也可以不切换使用master分支\ngit checkout static-dockerhub</code></pre>\n<h3 id=\"修改.env配置文件\">3.2 修改<code>.env</code>配置文件</h3>\n<p>首先需要将<code>ttrss-docker</code>文件夹中的<code>.env-dist</code>复制为<code>.env</code>。（注：<code>.env-dist</code>和<code>.env</code>均为隐藏文件，需要使用<code>ls -a</code>才能看到。）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cp .env-dist .env</code></pre>\n<p>打开<code>.env</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim .env</code></pre>\n<p>修改端口<code>HTTP_PORT</code>。默认为8280端口，可以配置为自定义端口。配置完成后，还需要Aliyun控制台开放端口访问，其它云平台类似，自建服务器那就自己搞定。</p>\n<p>修改URL<code>TTRSS_SELF_URL_PATH</code>。如果简单使用ip进行访问，只需要将<code>localhost</code>修改为服务器的ip地址即可。</p>\n<h3 id=\"拉取并启动容器\">3.3 拉取并启动容器</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker-compose pull &amp;&amp; docker-compose up -d</code></pre>\n<p>验证容器运行。 <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps</code></pre></p>\n<h3 id=\"登录ttrss\">3.4 登录TTRSS</h3>\n<p>使用浏览器访问<code>TTRSS_SELF_URL_PATH</code>配置的URL。默认账号密码为<code>admin</code>和<code>password</code>。<strong>进入前台系统后，请先通过界面右上角的<code>偏好设置</code>修改密码。</strong></p>\n<p>有需要的可以新建普通用户，将<code>admin</code>仅作为管理员用户。</p>\n<p><img src=\"/post/ttrss-build-2.htm/ttrss-setting-1.png\"></p>\n<p>注：文章编写时，TTRSS的前台系统由于使用<code>window.requestIdleCallback</code>API，该API并不受Safari支持，所以前台系统不能使用Safari<del>应该都知道我为什么知道吧</del>。</p>\n<p><img src=\"/post/ttrss-build-2.htm/ttrss-safari-bug.jpg\"></p>\n<h2 id=\"ttrss后续配置\">4 TTRSS后续配置</h2>\n<h3 id=\"fever\">4.1 Fever</h3>\n<p>目前大部分RSS的客户端可以使用fever和GoogleAPI登录，但遗憾的是TTRSS不原生支持fever\nAPI。因此，需要配置fever插件。</p>\n<p>获取TTRSS fever插件，仓库地址为<a href=\"https://github.com/DigitalDJ/tinytinyrss-fever-plugin\">DigitalDJ/tinytinyrss-fever-plugin</a>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git clone https:&#x2F;&#x2F;github.com&#x2F;DigitalDJ&#x2F;tinytinyrss-fever-plugin fever</code></pre>\n<p>由于ttrss是通过docker-compose安装的，所以具体的安装路径就不清楚了；虽然普通使用不需要知道安装路径，但是使用官方仓库以外的插件时，安装路径至关重要。下面先来确定TTRSS的安装路径。</p>\n<p>安装mlocate。为什么要安装mlocate呢？因为<code>find</code>的搜索速度堪忧啊。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install -y mlocate</code></pre>\n<p>初始化文件索引。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">updatedb</code></pre>\n<p>确定TTRSS安装路径。由于插件目录名称为<code>plugins.local</code>，为了简化搜索，直接搜索<code>plugins.local</code>即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">locate plugins.local</code></pre>\n<p>搜索后，TTRSS的安装路径就一目了然了，我的路径为<code>/var/lib/docker/volumes/ttrss-docker_app/_data/tt-rss/</code>。</p>\n<p><img src=\"/post/ttrss-build-2.htm/locate-plugins-folder.png\"></p>\n<p>之后将插件复制到TTRSS的<code>plugins.local</code>目录下。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cp -rf .&#x2F;fever &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;ttrss-docker_app&#x2F;_data&#x2F;tt-rss&#x2F;plugins.local&#x2F;</code></pre>\n<p>登录到TTRSS前台界面，进入偏好设置，勾选<code>启用API:外部客户端通过API来访问账户</code>。同时，页面底部会有<code>Fever Emulation</code>的条目。</p>\n<p><img src=\"/post/ttrss-build-2.htm/ttrss-fever-1.png\"></p>\n<p>选择<code>插件</code>条目，勾选<code>fever</code>。</p>\n<p><img src=\"/post/ttrss-build-2.htm/ttrss-fever-2.png\"></p>\n<p>选择<code>Fever Emulation</code>的条目，在文本框中输入fever连接密码（可以与ttrss账号密码相同）。点击<code>Set Password</code>，设置成功后会有浮窗。另外，记住红框内的地址，这是客户端连接fever的地址。</p>\n<p><img src=\"/post/ttrss-build-2.htm/ttrss-fever-3.png\"></p>\n<p>到这里，ttrss fever插件就搞定了。</p>\n<p>关于ttrss fever插件的更新。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git pull origin master\ncp -rf .&#x2F;fever &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;ttrss-docker_app&#x2F;_data&#x2F;tt-rss&#x2F;plugins.local&#x2F;</code></pre>\n<p>客户端连接可以参考下图。</p>\n<p><img src=\"/post/ttrss-build-2.htm/ttrss-reeder-setting.jpg\"></p>\n<h3 id=\"ttrss工具更新\">4.2 TTRSS工具更新</h3>\n<p>停止TTRSS相关容器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker-compose down &amp;&amp; docker-compose rm</code></pre>\n<p>拉取最新安装文件，根据需要选取分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 拉取static-dockerhub分支\ngit pull origin static-dockerhub\n# 拉取master分支\ngit pull origin master</code></pre>\n<p>依据新的<code>.env-dist</code>修改<code>.env</code>。</p>\n<p>再起用docker-compose拉取、启动。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker-compose pull &amp;&amp; docker-compose up</code></pre>\n<h2 id=\"总结\">总结</h2>\n<p>写文章时，我的TTRSS已经稳定运行了两周了，没有出什么幺蛾子。</p>\n<p><img src=\"/post/ttrss-build-2.htm/ttrss-reeder-done.jpg\"></p>\n<p>有TTRSS安装需求的同学可以参考上面的安装步骤，搭建自己的、可靠的RSS订阅服务。</p>\n","text":"贫穷的Leon的腾讯云服务器快要到期了(发文章的时候已经到期了)，自用的TTRSS服务岌岌可危，这可咋整啊！！！所幸几周前已经把阿里云上的博客全部迁移到Gith...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"DIY","slug":"DIY","count":2,"path":"api/categories/DIY.json"}],"tags":[{"name":"DIY","slug":"DIY","count":5,"path":"api/tags/DIY.json"},{"name":"RSS","slug":"RSS","count":2,"path":"api/tags/RSS.json"},{"name":"服务器","slug":"服务器","count":2,"path":"api/tags/服务器.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85docker\"><span class=\"toc-text\">1 安装Docker</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85docker-compose\"><span class=\"toc-text\">2 安装Docker Compose</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85ttrss\"><span class=\"toc-text\">3 安装TTRSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96docker%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.1 获取docker安装所需文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9.env%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.2 修改.env配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%89%E5%8F%96%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.3 拉取并启动容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%99%BB%E5%BD%95ttrss\"><span class=\"toc-text\">3.4 登录TTRSS</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ttrss%E5%90%8E%E7%BB%AD%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4 TTRSS后续配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fever\"><span class=\"toc-text\">4.1 Fever</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ttrss%E5%B7%A5%E5%85%B7%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">4.2 TTRSS工具更新</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"是什么驱动着无限进步？","uid":"0e2b3bc6dcc64b146a27719a98fa0f7d","slug":"driver-of-development","date":"2021-08-05T12:16:39.000Z","updated":"2022-10-21T07:50:56.806Z","comments":true,"path":"api/articles/driver-of-development.json","keywords":null,"cover":null,"text":" 崇高的理念在欲望面前根本无能为力 说到底 人类不过是充满欲望的生物 人活着就不能否定这一点 正因为这份欲望文明才进化至今 今后也会继续进化 绝不会倒退 建造燃...","link":"","photos":[],"count_time":{"symbolsCount":205,"symbolsTime":"1 mins."},"categories":[{"name":"观点&感想","slug":"观点-感想","count":1,"path":"api/categories/观点-感想.json"}],"tags":[{"name":"观点","slug":"观点","count":1,"path":"api/tags/观点.json"}],"author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux笔记之VNC配置","uid":"7ac6dc9261475ae0250d6f0f1b0b0bb4","slug":"linux-note-vnc-config","date":"2021-06-21T12:15:24.000Z","updated":"2022-11-22T09:37:18.297Z","comments":true,"path":"api/articles/linux-note-vnc-config.json","keywords":null,"cover":[],"text":"又要当苦力了，自bei愿po学习VNC多用户的配置。成就·学习运维技能之VNC配置，get！ 和XDMCP相同，环境为CentOS 7.8，且已安装GNOME桌...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"软件","slug":"软件","count":4,"path":"api/categories/软件.json"}],"tags":[{"name":"VNC","slug":"VNC","count":1,"path":"api/tags/VNC.json"},{"name":"CentOS","slug":"CentOS","count":2,"path":"api/tags/CentOS.json"}],"author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}