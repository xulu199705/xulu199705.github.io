{"title":"VHDL学习笔记之元件递归","uid":"52c7035373ef1c2748cd5317c2d16192","slug":"vhdl-note-component-recursion","date":"2020-08-05T10:32:19.000Z","updated":"2022-11-22T09:36:00.245Z","comments":true,"path":"api/articles/vhdl-note-component-recursion.json","keywords":null,"cover":[],"content":"<p>欢迎来看我的VHDL学习笔记，这是我写的第一篇，是关于我在用元件递归来设计n输入与门的全过程。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上个月没有时间<del>主要是懒</del>，所以没有达成每月至少一篇的小目标，这个与争取多写几篇。</p></blockquote>\n<span id=\"more\"></span>\n<p>设计n输入与门的想法是在做8421BCD计数器实验的时候冒出来的。设计这个计数器是用的D触发器，所以需要用到三输入的与门和或门。然后，我就联想到，如果是n输入的与门该怎么实现呢？</p>\n<h2 id=\"元件递归设计\">1 元件递归设计</h2>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>首先声明一点，元件递归的设计不是正常的设计，而且<strong>不可综合</strong>。</p></blockquote>\n<p>元件(component)是重复使用entity的一种方式，可以在此基础上设计出通用的实体在项目中使用，具体语法请查阅<a href=\"https://github.com/xulu199705/blog-attachment/blob/main/pdf/1076-2019_ieee-standard-for-vhdl-language-reference-manual.pdf\">IEEE\nStd 1076-2019</a>。</p>\n<p>在上数电课的时候，应该都知道设计多级逻辑门的时候最好要设计比较平衡的结构，以降低延迟带来的影响。所以，我在设计n输入与门的时候也想往这个方向靠。<del>但是事实证明我这个考虑似乎是多余的，见下一章</del><br>\n为了实现平衡的设计，我准备使用二分法。方案一，通过generate循环，使用二维数组存储每次二分的结果，循环次数可以通过<span class=\"math inline\">\\(n = \\lceil log_{2}{m}\n\\rceil\\)</span>得到；但这个方案感觉比较麻烦，选择放弃。<br>\n方案二，利用元件自己调用自己，通过递归来实现二分法。首先，将输入端口数port_num为1或者2作为递归结束条件，直接使用and操作符输出结果；然后，针对输入端口数port_num为奇数和偶数分别进行操作，将二分后的结果连接到信号re中，最后对re做与操作输出到outp。代码如下。</p>\n<pre class=\"line-numbers language-vhdl\" data-language=\"vhdl\"><code class=\"language-vhdl\">library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity add_gate is\n    generic (\n        port_num : integer :&#x3D; 6\n    );\n    port (\n        inp : in unsigned(port_num - 1 downto 0);\n        outp : out std_logic\n    );\nend add_gate;\n\narchitecture behavioral of add_gate is\n    component add_gate is\n        generic (\n            port_num : integer :&#x3D; 6\n        );\n        port (\n            inp : in unsigned(port_num - 1 downto 0);\n            outp : out std_logic\n        );\n    end component;\n\n    signal re : unsigned(1 downto 0) :&#x3D; &quot;00&quot;;\nbegin\n\n    gen : if port_num &#x3D; 1 generate\n        outp &lt;&#x3D; inp(0);\n    elsif port_num &#x3D; 2 generate\n        outp &lt;&#x3D; inp(0) and inp(1);\n    elsif port_num mod 2 &#x3D; 1 generate -- odd\n        add1 : add_gate generic map (port_num &#x3D;&gt; port_num &#x2F; 2 + 1)\n                        port map (inp &#x3D;&gt; inp(port_num &#x2F; 2 downto 0), outp &#x3D;&gt; re(0));\n        add2 : add_gate generic map (port_num &#x3D;&gt; port_num &#x2F; 2)\n                        port map (inp &#x3D;&gt; inp(port_num - 1 downto port_num &#x2F; 2 + 1), outp &#x3D;&gt; re(1));\n        outp &lt;&#x3D; re(0) and re(1);\n    else generate -- even\n        add1 : add_gate generic map (port_num &#x3D;&gt; port_num &#x2F; 2)\n                        port map (inp &#x3D;&gt; inp(port_num &#x2F; 2 - 1 downto 0), outp &#x3D;&gt; re(0));\n        add2 : add_gate generic map (port_num &#x3D;&gt; port_num &#x2F; 2)\n                        port map (inp &#x3D;&gt; inp(port_num - 1 downto port_num &#x2F; 2), outp &#x3D;&gt; re(1));\n        outp &lt;&#x3D; re(0) and re(1);\n    end generate;\n\nend behavioral;</code></pre>\n<p>简单写了个仿真文件，仿真结果如下。</p>\n<figure>\n<img src=\"/post/vhdl-note-component-recursion.htm/3099739303.png#vwid=795&amp;vhei=409\" alt=\"综合前仿真结果\">\n<figcaption aria-hidden=\"true\">综合前仿真结果</figcaption>\n</figure>\n<p>当然了，<strong>元件递归是不可综合的</strong>，综合是会出现如下的弹窗。</p>\n<figure>\n<img src=\"/post/vhdl-note-component-recursion.htm/4032806407.png#vwid=541&amp;vhei=351\" alt=\"综合元件递归综合时出错\">\n<figcaption aria-hidden=\"true\">综合元件递归综合时出错</figcaption>\n</figure>\n<h2 id=\"正常的n输入与门设计\">2 正常的n输入与门设计</h2>\n<p>一般来说，设计n输入与门是不会使用二分法的。虽然思路没错，但是，真的没有必要，原因我会在后面提到。下面两段代码都是比较正常的而且可以使用的n输入与门的设计。</p>\n<pre class=\"line-numbers language-vhdl\" data-language=\"vhdl\"><code class=\"language-vhdl\">-- 示例一\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity add_gate is\n    generic (\n        port_num : integer :&#x3D; 6\n    );\n    port (\n        inp : in unsigned(port_num - 1 downto 0);\n        outp : out std_logic\n    );\nend add_gate;\n\narchitecture behavioral of add_gate is\n    signal tmp : unsigned(port_num - 1 downto 0);\nbegin\n\n    tmp(0) &lt;&#x3D; inp(0);\n    gen : for i in 1 to port_num - 1 generate\n        tmp(i) &lt;&#x3D; tmp(i - 1) and inp(i);\n    end generate;\n    outp &lt;&#x3D; tmp(port_num - 1);\n\nend behavioral;</code></pre>\n<p>示例一使用for/generate将后加入的输入信号和之前的结果进行与操作，RTL原理图如下。</p>\n<figure>\n<img src=\"/post/vhdl-note-component-recursion.htm/590385094.png#vwid=1184&amp;vhei=402\" alt=\"示例一RTL原理图\">\n<figcaption aria-hidden=\"true\">示例一RTL原理图</figcaption>\n</figure>\n<pre class=\"line-numbers language-vhdl\" data-language=\"vhdl\"><code class=\"language-vhdl\">-- 示例二\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity add_gate is\n    generic (\n        port_num : integer :&#x3D; 6\n    );\n    port (\n        inp : in unsigned(port_num - 1 downto 0);\n        outp : out std_logic\n    );\nend add_gate;\n\narchitecture behavioral of add_gate is\nbegin\n\n    outp &lt;&#x3D; &#39;1&#39; when inp &#x3D; to_unsigned(2 ** port_num - 1, port_num) else\n            &#39;0&#39;;\n\nend behavioral;</code></pre>\n<p>示例二利用了n输入与门的实质，即所有输入都为高电平才输出高电平，否则输出低电平，RTL原理图如下。</p>\n<figure>\n<img src=\"/post/vhdl-note-component-recursion.htm/2322955368.png#vwid=868&amp;vhei=495\" alt=\"示例二RTL原理图\">\n<figcaption aria-hidden=\"true\">示例二RTL原理图</figcaption>\n</figure>\n<p>接下来，就要说说为什么二分法没有必要了。很显然，示例一的RTL图是一点都不平衡的设计，如果在实际连接中使用这个结构势必会出现延时的问题。但是，如果综合这两个示例，如下所示，就会发现这两个示例的RTL原理图虽然大相径庭，但是他们的综合后原理图是一模一样的。图中的LUT(查找表)是FPGA的基本组成单元，可以当做是一个n*1的RAM。以图中的6输入LUT为例，LUT内部存储了<span class=\"math inline\">\\(2^n\\)</span>个1bit的数据，地址是6位的；输入信号是地址总线，LUT根据输入的地址查找到相应地址的数据，将数据直接输出到LUT的输出端口上。</p>\n<figure>\n<img src=\"/post/vhdl-note-component-recursion.htm/2394619868.png#vwid=930&amp;vhei=499\" alt=\"示例一综合后原理图\">\n<figcaption aria-hidden=\"true\">示例一综合后原理图</figcaption>\n</figure>\n<figure>\n<img src=\"/post/vhdl-note-component-recursion.htm/350538066.png#vwid=958&amp;vhei=497\" alt=\"示例二综合后原理图\">\n<figcaption aria-hidden=\"true\">示例二综合后原理图</figcaption>\n</figure>\n<h2 id=\"总结\">3 总结</h2>\n<p>虽然这次用了元件递归来设计n输入与门才发现元件递归是不能综合的\n:&amp;(蛆音娘_扶额)\n，并且综合工具的优化功能是很强大的，但是，这次尝试真的特别有意思，让我对FPGA的设计有了新的关注点。之后的学习过程中，我准备将之前学过的算法设计思想添加到FPGA设计中，找到新的乐趣。\n:@(击掌)</p>\n<p>最后的最后，请别忘了<del>一键三连</del>收藏分享。</p>\n","text":"欢迎来看我的VHDL学习笔记，这是我写的第一篇，是关于我在用元件递归来设计n输入与门的全过程。 上个月没有时间主要是懒，所以没有达成每月至少一篇的小目标，这个与...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"集成电路","slug":"集成电路","count":3,"path":"api/categories/集成电路.json"}],"tags":[{"name":"VHDL","slug":"VHDL","count":1,"path":"api/tags/VHDL.json"},{"name":"FPGA","slug":"FPGA","count":1,"path":"api/tags/FPGA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E4%BB%B6%E9%80%92%E5%BD%92%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">1 元件递归设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%B8%B8%E7%9A%84n%E8%BE%93%E5%85%A5%E4%B8%8E%E9%97%A8%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2 正常的n输入与门设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3 总结</span></a></li></ol>","author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"IC笔记之反相器仿真","uid":"c274b55517427566bb1fb55b73de09f9","slug":"ic-note-inv-simu","date":"2021-03-30T00:23:04.000Z","updated":"2022-08-18T02:43:12.314Z","comments":true,"path":"api/articles/ic-note-inv-simu.json","keywords":null,"cover":[],"text":"2021第一次更新啦！！！ 本文是基于IC618的ADE仿真操作基本介绍，以反相器为例。 接下来一段时间还会陆陆续续地更新一些IC电路的仿真。 仿真基于SMIC...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"集成电路","slug":"集成电路","count":3,"path":"api/categories/集成电路.json"}],"tags":[{"name":"IC","slug":"IC","count":1,"path":"api/tags/IC.json"},{"name":"IC618","slug":"IC618","count":1,"path":"api/tags/IC618.json"}],"author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"斯普林格Springer免费书籍","uid":"574f06cad9be6e2313092676c908ea8b","slug":"springer-free-books-2020","date":"2020-06-24T07:22:17.000Z","updated":"2022-08-17T16:55:04.626Z","comments":true,"path":"api/articles/springer-free-books-2020.json","keywords":null,"cover":null,"text":"2020年不知不觉已经过去一半时间了。 :@(汗) 斯普林格，Springer，是欧美非常著名的科技图书出版社。目前全球都被Covid-19笼罩，为了帮助有学习...","link":"","photos":[],"count_time":{"symbolsCount":325,"symbolsTime":"1 mins."},"categories":[{"name":"杂项","slug":"杂项","count":5,"path":"api/categories/杂项.json"}],"tags":[{"name":"资源","slug":"资源","count":1,"path":"api/tags/资源.json"},{"name":"书籍","slug":"书籍","count":1,"path":"api/tags/书籍.json"}],"author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}