{"title":"关于Spring框架的IOC和DI的理解","uid":"6b6554949ec7891871430409cc8c842a","slug":"spring-ioc-di","date":"2018-01-26T11:05:17.000Z","updated":"2022-08-17T16:55:00.796Z","comments":true,"path":"api/articles/spring-ioc-di.json","keywords":null,"cover":null,"content":"<p>Spring框架的详细内容就不赘述了。（也实在不是谦虚，主要是刚了解没几天，对Spring的框架完全没有概念）</p>\n<p>下面来说说我，一个初学者，对DI的理解。</p>\n<span id=\"more\"></span>\n<p>1.假如没有Spring，Java中实例化对象一般都是调用构造器。这样，每个对象实例化的时候都要执行一遍实例化的流程。\n2.现在，有了Spring框架，可以使用依赖注入DI，将一些Java类预先进行实例化，并保存为对象模版。而之后的每次实例化都可以直接调用已经实例化成功的对象模版。</p>\n<p>个人认为，当某一类实例化次数较多时，可以有效地减少系统运行的时间。同时，这也可以减少服务器的物力资源压力。假如某一服务要被调用一万次，那么这个service类就会被实例化一万次；而使用了IOC和DI之后，一方面，实例化一万个对象的时间可以节约下来，另外一方面，bean在生命周期结束会释放资源，减轻了服务器的资源压力。</p>\n<p>这个是我今天看了Spring框架之后的理解。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (大犇.发现错误()) &#123;\n  大犇.println(错误);\n&#125;</code></pre>\n","text":"Spring框架的详细内容就不赘述了。（也实在不是谦虚，主要是刚了解没几天，对Spring的框架完全没有概念） 下面来说说我，一个初学者，对DI的理解。 1.假...","link":"","photos":[],"count_time":{"symbolsCount":450,"symbolsTime":"1 mins."},"categories":[{"name":"杂项","slug":"杂项","count":5,"path":"api/categories/杂项.json"}],"tags":[{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"toc":"","author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"从零开始的客制化87键机械键盘_1_立项","uid":"d1828fe679e46c6ff31652ba67ef65f8","slug":"keyboard87-1","date":"2018-12-25T12:24:41.000Z","updated":"2022-11-22T09:37:45.764Z","comments":true,"path":"api/articles/keyboard87-1.json","keywords":null,"cover":[],"text":"还有半年就要毕业了，在做毕业设计之余，我准备客制化一个87键机械键盘。键盘用STM32做主控，USB type-C做接口，以基本操作为最低目标。当然了，由于主专...","link":"","photos":[],"count_time":{"symbolsCount":455,"symbolsTime":"1 mins."},"categories":[{"name":"硬件","slug":"硬件","count":5,"path":"api/categories/硬件.json"}],"tags":[{"name":"STM32","slug":"STM32","count":4,"path":"api/tags/STM32.json"},{"name":"键盘","slug":"键盘","count":3,"path":"api/tags/键盘.json"},{"name":"DIY","slug":"DIY","count":5,"path":"api/tags/DIY.json"}],"author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"STM32基础_GPIO流水灯","uid":"4c8744899e8fd06f078cf01c7e6e9c70","slug":"stm32-gpio-led","date":"2017-07-28T09:22:18.000Z","updated":"2022-11-22T09:36:57.526Z","comments":true,"path":"api/articles/stm32-gpio-led.json","keywords":null,"cover":[],"text":"从一个月前开始学习STM32，对于MCU的理解也更加深入透彻。今天开始就陆续将自己在学习中的经历发布到这里（当然，更新随缘）。 1 流水灯实验原理 LED模块的...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"硬件","slug":"硬件","count":5,"path":"api/categories/硬件.json"}],"tags":[{"name":"STM32","slug":"STM32","count":4,"path":"api/tags/STM32.json"}],"author":{"name":"Leon","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17242727?s=60&v=4","link":"/","description":"这里是爱研究各种问题、立许多flag的Leon的网络日志","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}